"name","description"
"1. Smartphone overview", "Verify if the smartphone is rooted/jailbreaked. You could find a lot of weak & common attack vectors. Check which OS version is running."
"2. Insecure data storage", "Check applications logs, usually they contain sensitive data. When analyzing the code, verify (with regexp or common words) if credentials are hardcoded. Also, mobile apps don't use secure storages for storing sensitive data and save them in app local storage (like temp/cached data)."
"3. Insecure communication", "Check if mobile app components are using unencrypted channels for communication, such as FTP/TELNET/HTTP."
"4. Weak components", "Applications may use various third-party libraries/components that can be outdated and contain vulnerabilities with public exploits. Those are a great vector for starting an attack."
"5. Cryptography issues", "Check if the app is validating the server's TLS/SSL certificate (certificate pinning). Also, try changing HTTPS requests to HTTP (as tools like SSLStrip would do) to intercept plain information. Check if the app is using cryptographic protocols or algorithms that are widely considered deprecated."
"6. Authentication/Authorization", "Verify if the app generates random access tokens for user authentication and, when session ends, the token is deleted. Bruteforce attacks are useful to check if accounts are locked after X attempts."
"7. Code quality", "Verify that debugging code has been removed and the app doesn't log verbose errors or debugging messages."
"8. Data tampering", "Try to inject data that the app is not expecting (like numbers when it's waiting for a string) and check the different error messages."
"9. Reverse engineering", "At decompiling, commonly you can read its source code because it's not obfuscated or it's using very poor obfuscation techniques. Also, try debugging techniques, developers usually forget to disable android:debuggable parameter."
