"name","description"
"6.5 Address common coding vulnerabilities in software-development processes as follows", "Train developers at least annually in up- to-date secure coding techniques, including how to avoid common coding vulnerabilities. Develop applications based on secure coding guidelines."
"6.5.1 Injection flaws", "Particularly SQL injection. Also consider OS Command Injection, LDAP and XPath injection flaws as well as other injection flaws."
"6.5.2 Buffer overflows", "Verify that buffer overflows are addressed by coding techniques that include: Validating buffer boundaries and Truncating input strings."
"6.5.3 Insecure cryptographic storage", "Verify that insecure cryptographic storage is addressed by coding techniques that: Prevent cryptographic flaws and use strong cryptographic algorithms and keys."
"6.5.4 Insecure communications", "Verify that insecure communications are addressed by coding techniques that properly authenticate and encrypt all sensitive communications."
"6.5.5 Improper error handling", "Verify that improper error handling is addressed by coding techniques that do not leak information via error messages (for example, by returning generic rather than specific error details)."
"6.5.6 All 'high risk' vulnerabilities identified", "Verify that coding techniques address any 'high risk' vulnerabilities that could affect the application, as identified in PCI DSS Requirement 6.1."
"6.5.7 Cross-site scripting (XSS)", "Verify that cross-site scripting (XSS) is addressed by coding techniques that include validating all parameters before inclusion or utilizing context-sensitive escaping."
"6.5.8 Improper access control", "Verify insecure direct object references, failure to restrict URL access, directory traversal, and failure to restrict user access to functions."
"6.5.9 Cross-site request forgery (CSRF)", "Verify that CSRF is addressed by coding techniques that ensure applications do not rely on authorization credentials and tokens automatically submitted by browsers."
"6.5.10 Broken authentication and session management", "Verify that broken authentication and session management are addressed via coding techniques that commonly include: Flagging session tokens (for example cookies) as 'secure', not exposing session IDs in the URL, incorporating appropriate time-outs and rotation of session IDs after a successful login."
